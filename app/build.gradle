apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion pCompileSdkVersion
    defaultConfig {
        applicationId "com.yqman.evan"
        minSdkVersion pMinSdkVersion
        targetSdkVersion pTargetSdkVersion
        versionCode 1
        versionName "1.0.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    // 配置 release 的签名信息
    signingConfigs {
        release {
            storeFile
            storePassword
            keyAlias
            keyPassword
        }
    }
    getSigningProperties()

    buildTypes {
        debug {
            signingConfig signingConfigs.release
        }

        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    dataBinding { enabled = true }
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation(name:'widget-0.0.0', ext:'aar')
    implementation project(':CloudFile')
    implementation project(':Monitor')
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:recyclerview-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    def lifecycle_version = "1.1.1"
    implementation ("android.arch.lifecycle:extensions:$lifecycle_version")
    kapt "android.arch.lifecycle:compiler:$lifecycle_version"
    def room_version = "1.1.1"
    implementation "android.arch.persistence.room:runtime:$room_version"
    kapt "android.arch.persistence.room:compiler:$room_version"
    implementation "android.arch.work:work-runtime:1.0.0-alpha07"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.5.4'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.4'
    // Required for local unit tests (JUnit 4 framework)
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support:support-annotations:27.1.1'
    // Set this dependency to use JUnit 4 rules
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    // Set this dependency to build and run Espresso tests
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    implementation('com.squareup.picasso:picasso:2.71828') {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'exifinterface'
    }
}

// 读取签名配置
def getSigningProperties() {
    def propFile = file('../signing.properties')
    if (propFile.exists() && propFile.canRead()) {
        def props = new Properties()
        props.load(new FileInputStream(propFile))
        if (props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
                props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
            android.signingConfigs.release.storeFile = file('../' + props['STORE_FILE'])
            android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
            android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
            android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
        } else {
            println 'signing.properties are found but some entries are missed!'
            android.buildTypes.release.signingConfig = null
        }
    } else {
        println 'signing.properties are not found!'
        android.buildTypes.release.signingConfig = null
    }
}